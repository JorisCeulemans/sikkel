open import Experimental.DeepEmbedding.Generic.Builtin.ModeTheory

module Experimental.DeepEmbedding.Generic.InterpretTypes (mt : ModeTheory) where

open import CwF-Structure as M hiding (‚óá; _,,_; var; _‚ì£-vert_; _‚ì£-hor_)
open import Types.Discrete as M hiding (Nat'; Bool')
open import Types.Functions as M hiding (_‚áõ_; lam; app)
open import Types.Products as M hiding (_‚ä†_; pair; fst; snd)
open import Types.Instances as M
open import Modalities as M hiding (ùüô; _‚ìú_; ‚ü®_‚à£_‚ü©; _,lock‚ü®_‚ü©; mod-intro; mod-elim)

open import Experimental.DeepEmbedding.Generic.TCMonad
open import Experimental.DeepEmbedding.Generic.Syntax mt

open ModeTheory mt

private
  variable
    m : ModeExpr


‚ü¶_‚üßty : TyExpr m ‚Üí ClosedType ‚ü¶ m ‚üßmode
‚ü¶ Nat' ‚üßty = M.Nat'
‚ü¶ Bool' ‚üßty = M.Bool'
‚ü¶ T1 ‚áõ T2 ‚üßty = ‚ü¶ T1 ‚üßty M.‚áõ ‚ü¶ T2 ‚üßty
‚ü¶ T1 ‚ä† T2 ‚üßty = ‚ü¶ T1 ‚üßty M.‚ä† ‚ü¶ T2 ‚üßty
‚ü¶ ‚ü® Œº ‚à£ T ‚ü© ‚üßty = M.‚ü® ‚ü¶ Œº ‚üßmodality ‚à£ ‚ü¶ T ‚üßty ‚ü©

‚ü¶_‚üßctx : CtxExpr m ‚Üí Ctx ‚ü¶ m ‚üßmode
‚ü¶ ‚óá ‚üßctx = M.‚óá
‚ü¶ Œì , _ ‚àà T ‚üßctx = ‚ü¶ Œì ‚üßctx M.,, ‚ü¶ T ‚üßty
‚ü¶ Œì ,lock‚ü® Œº ‚ü© ‚üßctx = ‚ü¶ Œì ‚üßctx M.,lock‚ü® ‚ü¶ Œº ‚üßmodality ‚ü©

‚ü¶‚üßty-natural : (T : TyExpr m) ‚Üí IsClosedNatural ‚ü¶ T ‚üßty
‚ü¶‚üßty-natural Nat' = M.discr-closed
‚ü¶‚üßty-natural Bool' = M.discr-closed
‚ü¶‚üßty-natural (T1 ‚áõ T2) = M.fun-closed {{‚ü¶‚üßty-natural T1}} {{‚ü¶‚üßty-natural T2}}
‚ü¶‚üßty-natural (T1 ‚ä† T2) = M.prod-closed {{‚ü¶‚üßty-natural T1}} {{‚ü¶‚üßty-natural T2}}
‚ü¶‚üßty-natural ‚ü® Œº ‚à£ T ‚ü© = M.mod-closed {Œº = ‚ü¶ Œº ‚üßmodality} {{‚ü¶‚üßty-natural T}}

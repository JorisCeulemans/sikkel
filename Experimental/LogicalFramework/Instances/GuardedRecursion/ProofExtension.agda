module Experimental.LogicalFramework.Instances.GuardedRecursion.ProofExtension where

open import Data.List
open import Data.Product
open import Relation.Binary.PropositionalEquality as Ag

open import Experimental.LogicalFramework.Proof.CheckingMonad

open import Experimental.LogicalFramework.Instances.GuardedRecursion.MSTT
open import Experimental.LogicalFramework.Instances.GuardedRecursion.TypeExtension
open import Experimental.LogicalFramework.Instances.GuardedRecursion.TermExtension
open import Experimental.LogicalFramework.Instances.GuardedRecursion.bPropExtension
open import Experimental.LogicalFramework.Instances.GuardedRecursion.Soundness

open import Experimental.LogicalFramework.Proof.AlphaEquivalence guarded-mstt guarded-bp-ext guarded-bp-ext-sem
open import Experimental.LogicalFramework.Proof.Context guarded-mstt guarded-bp-ext guarded-bp-ext-sem
open import Experimental.LogicalFramework.Proof.Checker.SyntaxViews guarded-mstt guarded-bp-ext guarded-bp-ext-sem
open import Experimental.LogicalFramework.Proof.Checker.ResultType guarded-mstt guarded-bp-ext guarded-bp-ext-sem
open import Experimental.LogicalFramework.bProp guarded-mstt guarded-bp-ext guarded-bp-ext-sem

open import Experimental.LogicalFramework.MSTT.Parameter.TermExtension guarded-mt guarded-ty-ext
open import Experimental.LogicalFramework.Parameter.ArgInfo guarded-mt guarded-ty-ext
open import Experimental.LogicalFramework.Parameter.ProofExtension guarded-mstt guarded-bp-ext guarded-bp-ext-sem

private variable
  m : Mode
  Œì : Ctx m
  T A B : Ty m


data ProofExtCode : Mode ‚Üí Set where
  tml√∂b-Œ≤-code : ProofExtCode œâ
  pfl√∂b-code : (x : Name) ‚Üí ProofExtCode œâ

pf-code-tmarg-infos : ProofExtCode m ‚Üí List (TmArgInfo m)
pf-code-tmarg-infos tml√∂b-Œ≤-code = []
pf-code-tmarg-infos (pfl√∂b-code x) = []

pf-code-bparg-infos : ProofExtCode m ‚Üí List (ArgInfo m)
pf-code-bparg-infos tml√∂b-Œ≤-code = []
pf-code-bparg-infos (pfl√∂b-code x) = []

pf-code-pfarg-infos : ProofExtCode m ‚Üí List (ArgInfo m)
pf-code-pfarg-infos tml√∂b-Œ≤-code = []
pf-code-pfarg-infos (pfl√∂b-code x) =
  arg-info ‚óá ‚à∑
  []


data IsLob : Tm Œì T ‚Üí Set where
  is-lob : (x : Name) (T : Ty œâ) (t : Tm (Œì ,, later ‚à£ x ‚àà T) T) ‚Üí IsLob (l√∂b[later‚à£ x ‚àà T ] t)

is-lob? : (t : Tm Œì T) ‚Üí PCM (IsLob t)
is-lob? (l√∂b[later‚à£ x ‚àà T ] t) = return (is-lob x T t)
is-lob? _ = throw-error "l√∂b induction expected"


pf-code-check : (c : ProofExtCode m) (Œû : ProofCtx m) (œÜ : bProp (to-ctx Œû))
                {tmarg-names : TmArgBoundNames (pf-code-tmarg-infos c)} (tmargs : ExtTmArgs (pf-code-tmarg-infos c) tmarg-names (to-ctx Œû))
                {bparg-names : ArgBoundNames (pf-code-bparg-infos c)} (bpargs : ExtBPArgs (pf-code-bparg-infos c) bparg-names (to-ctx Œû))
                (pfarg-names : ArgBoundNames (pf-code-pfarg-infos c)) ‚Üí
                ProofCheckExt (pf-code-pfarg-infos c) pfarg-names Œû œÜ
pf-code-check tml√∂b-Œ≤-code Œû œÜ _ _ _ = do
  is-eq lhs rhs ‚Üê is-eq? œÜ
  is-lob x T t ‚Üê is-lob? lhs
  e-rhs ‚Üê rhs ‚âütm (t [ ((l√∂b[later‚à£ x ‚àà T ] t) [ key ≥ (lock‚ü® later ‚ü©, ‚óá) ‚óá ùüô‚â§ltr ]tm ≥) / x ]tmÀ¢)
  return ‚üÖ [] , _ ‚Ü¶ tml√∂b-Œ≤-sound Œû x t rhs e-rhs ‚üÜ
pf-code-check (pfl√∂b-code x) Œû œÜ _ _ (_ , _) = Œª check-subpf ‚Üí do
  ‚üÖ goals , ‚ü¶p‚üß ‚üÜ ‚Üê check-subpf (Œû ,,·µá later ‚à£ x ‚àà œÜ [ key ≥ (lock‚ü® later ‚ü©, ‚óá) ‚óá ùüô‚â§ltr ]bprop ≥) œÜ Ag.refl
  return ‚üÖ goals , sgoals ‚Ü¶ pf-l√∂b-sound Œû œÜ x (‚ü¶p‚üß sgoals) ‚üÜ

guarded-pf-ext : ProofExt
ProofExt.ProofExtCode guarded-pf-ext = ProofExtCode
ProofExt.pf-code-tmarg-infos guarded-pf-ext = pf-code-tmarg-infos
ProofExt.pf-code-bparg-infos guarded-pf-ext = pf-code-bparg-infos
ProofExt.pf-code-pfarg-infos guarded-pf-ext = pf-code-pfarg-infos
ProofExt.pf-code-check guarded-pf-ext = pf-code-check

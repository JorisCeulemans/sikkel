open import Experimental.LogicalFramework.MSTT.Parameter.ModeTheory
open import Experimental.LogicalFramework.MSTT.Parameter.TypeExtension using (TyExt)

module Experimental.LogicalFramework.MSTT.Interpretation.TypeContext
  (‚Ñ≥ : ModeTheory) (ùíØ : TyExt ‚Ñ≥)
  where

open import Data.List
open import Data.Product
open import Data.Unit

open ModeTheory ‚Ñ≥
open TyExt ùíØ
open Experimental.LogicalFramework.MSTT.Parameter.TypeExtension ‚Ñ≥

open import Model.CwF-Structure as M
  renaming (Ctx to SemCtx; Ty to SemTy; Tm to SemTm) using ()
open import Model.CwF-Structure.ClosedType
import Model.Type.Function as M
import Model.Type.Product as M
import Model.Type.Constant as M
import Model.Modality as M

open import Experimental.LogicalFramework.MSTT.Syntax.Types ‚Ñ≥ ùíØ
open import Experimental.LogicalFramework.MSTT.Syntax.Contexts ‚Ñ≥ ùíØ ‚ä§

private variable
  m n o : Mode
  Œº Œ∫ : Modality m n
  Œì : Ctx m
  T : Ty m


‚ü¶_‚üßty : Ty m ‚Üí ClosedTy ‚ü¶ m ‚üßmode
apply-sem-ty-constructor : ‚àÄ {margs} ‚Üí SemTyConstructor margs m ‚Üí TyExtArgs margs ‚Üí ClosedTy ‚ü¶ m ‚üßmode

‚ü¶ Nat' ‚üßty = M.Nat'
‚ü¶ Bool' ‚üßty = M.Bool'
‚ü¶ ‚ü® Œº ‚à£ T ‚ü©‚áõ S ‚üßty = M.‚ü® ‚ü¶ Œº ‚üßmod ‚à£ ‚ü¶ T ‚üßty ‚ü© M.‚áõ ‚ü¶ S ‚üßty
‚ü¶ T ‚ä† S ‚üßty = ‚ü¶ T ‚üßty M.‚ä† ‚ü¶ S ‚üßty
‚ü¶ ‚ü® Œº ‚à£ T ‚ü© ‚üßty = M.‚ü® ‚ü¶ Œº ‚üßmod ‚à£ ‚ü¶ T ‚üßty ‚ü©
‚ü¶ Ext c Args ‚üßty = apply-sem-ty-constructor ‚ü¶ c ‚üßty-code Args

apply-sem-ty-constructor {margs = []}        T Args       = T
apply-sem-ty-constructor {margs = m ‚à∑ margs} F (A , Args) = apply-sem-ty-constructor (F ‚ü¶ A ‚üßty) Args


ty-closed-natural : (T : Ty m) ‚Üí IsClosedNatural ‚ü¶ T ‚üßty
ext-ty-natural : ‚àÄ{margs} {F : SemTyConstructor margs m} ‚Üí SemTyConstructorNatural F ‚Üí (args : TyExtArgs margs) ‚Üí
                 IsClosedNatural (apply-sem-ty-constructor F args)

ty-closed-natural Nat' = M.const-closed
ty-closed-natural Bool' = M.const-closed
ty-closed-natural (‚ü® Œº ‚à£ T ‚ü©‚áõ S) = M.fun-closed (M.dra-closed ‚ü¶ Œº ‚üßmod (ty-closed-natural T)) (ty-closed-natural S)
ty-closed-natural (T ‚ä† S) = M.prod-closed (ty-closed-natural T) (ty-closed-natural S)
ty-closed-natural ‚ü® Œº ‚à£ T ‚ü© = M.dra-closed ‚ü¶ Œº ‚üßmod (ty-closed-natural T)
ty-closed-natural (Ext c Args) = ext-ty-natural (sem-ty-code-natural c) Args

ext-ty-natural {margs = []}        nat Args       = nat
ext-ty-natural {margs = m ‚à∑ margs} nat (A , Args) = ext-ty-natural (nat (ty-closed-natural A)) Args


ty-natural : (T : Ty m) {Œì Œî : SemCtx ‚ü¶ m ‚üßmode} {œÉ : Œì M.‚áí Œî} ‚Üí ‚ü¶ T ‚üßty M.[ œÉ ] M.‚âÖ·µó ∏ ‚ü¶ T ‚üßty
ty-natural T = closed-natural (ty-closed-natural T) _

‚ü¶_‚üßctx-nmls : Ctx m ‚Üí SemCtx ‚ü¶ m ‚üßmode
‚ü¶ ‚óá ‚üßctx-nmls = M.‚óá
‚ü¶ Œì ,, Œº ‚à£ _ ‚àà T ‚üßctx-nmls = ‚ü¶ Œì ‚üßctx-nmls M.,, M.‚ü® ‚ü¶ Œº ‚üßmod ‚à£ ‚ü¶ T ‚üßty ‚ü©
‚ü¶ Œì ,lock‚ü® Œº ‚ü© ‚üßctx-nmls = M.lock ‚ü¶ Œº ‚üßmod ‚ü¶ Œì ‚üßctx-nmls

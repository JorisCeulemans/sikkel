--------------------------------------------------
-- Interpretation of nameless MSTT types, contexts and terms in a
--   presheaf model
--------------------------------------------------

module Experimental.LogicalFramework.MSTT.Interpretation.Nameless where

open import Relation.Binary.PropositionalEquality

open import Model.BaseCategory
open import Model.CwF-Structure as M
  renaming (Ctx to SemCtx; Ty to SemTy; Tm to SemTm) using ()
open import Model.CwF-Structure.ClosedType
import Model.Type.Function as M
import Model.Type.Product as M
import Model.Type.Constant as M
import Model.Modality as M

open import Experimental.LogicalFramework.MSTT.ModeTheory
open import Experimental.LogicalFramework.MSTT.Syntax.Nameless
open import Experimental.LogicalFramework.MSTT.AlphaEquivalence
open import Experimental.LogicalFramework.MSTT.Interpretation.ModeTheory

private variable
  m n o : Mode
  Œº Œ∫ : Modality m n
  Œì : Ctx m
  T : Ty m


‚ü¶_‚üßty : Ty m ‚Üí ClosedTy ‚ü¶ m ‚üßmode
‚ü¶ Nat' ‚üßty = M.Nat'
‚ü¶ Bool' ‚üßty = M.Bool'
‚ü¶ ‚ü® Œº ‚à£ T ‚ü©‚áõ S ‚üßty = M.‚ü® ‚ü¶ Œº ‚üßmod ‚à£ ‚ü¶ T ‚üßty ‚ü© M.‚áõ ‚ü¶ S ‚üßty
‚ü¶ T ‚ä† S ‚üßty = ‚ü¶ T ‚üßty M.‚ä† ‚ü¶ S ‚üßty
‚ü¶ ‚ü® Œº ‚à£ T ‚ü© ‚üßty = M.‚ü® ‚ü¶ Œº ‚üßmod ‚à£ ‚ü¶ T ‚üßty ‚ü©

ty-closed-natural : (T : Ty m) ‚Üí IsClosedNatural ‚ü¶ T ‚üßty
ty-closed-natural Nat' = M.const-closed
ty-closed-natural Bool' = M.const-closed
ty-closed-natural (‚ü® Œº ‚à£ T ‚ü©‚áõ S) = M.fun-closed (M.mod-closed {Œº = ‚ü¶ Œº ‚üßmod} (ty-closed-natural T)) (ty-closed-natural S)
ty-closed-natural (T ‚ä† S) = M.prod-closed (ty-closed-natural T) (ty-closed-natural S)
ty-closed-natural ‚ü® Œº ‚à£ T ‚ü© = M.mod-closed {Œº = ‚ü¶ Œº ‚üßmod} (ty-closed-natural T)

ty-natural : (T : Ty m) {Œì Œî : SemCtx ‚ü¶ m ‚üßmode} {œÉ : Œì M.‚áí Œî} ‚Üí ‚ü¶ T ‚üßty M.[ œÉ ] M.‚âÖ·µó ∏ ‚ü¶ T ‚üßty
ty-natural T = closed-natural (ty-closed-natural T) _

‚ü¶_‚üßctx-nmls : Ctx m ‚Üí SemCtx ‚ü¶ m ‚üßmode
‚ü¶ ‚óá ‚üßctx-nmls = M.‚óá
‚ü¶ Œì ,, Œº ‚à£ _ ‚àà T ‚üßctx-nmls = ‚ü¶ Œì ‚üßctx-nmls M.,, M.‚ü® ‚ü¶ Œº ‚üßmod ‚à£ ‚ü¶ T ‚üßty ‚ü©
‚ü¶ Œì ,lock‚ü® Œº ‚ü© ‚üßctx-nmls = M.lock ‚ü¶ Œº ‚üßmod ‚ü¶ Œì ‚üßctx-nmls

‚ü¶‚üßvar-helper : {Œì : Ctx m} {Œº : Modality n o} {Œ∫ : Modality m o} (v : Var _ Œº T Œ∫ Œì) ‚Üí
               (œÅ : Modality n m) ‚Üí TwoCell Œº (Œ∫ ‚ìú œÅ) ‚Üí SemTm ‚ü¶ Œì ,lock‚ü® œÅ ‚ü© ‚üßctx-nmls ‚ü¶ T ‚üßty
‚ü¶‚üßvar-helper {T = T} {Œº = Œº} vzero œÅ Œ± =
  M.Œπ‚Åª¬π[ ty-natural T ]
    ((M.mod-elim ‚ü¶ Œº ‚üßmod (M.Œπ‚Åª¬π[ ty-natural ‚ü® Œº ‚à£ T ‚ü© ] M.Œæ)) M.[ M.key-subst ‚ü¶ Œ± ‚üßtwo-cell _ ]')
‚ü¶‚üßvar-helper {T = T} (vsuc v) œÅ Œ± = M.Œπ‚Åª¬π[ ty-natural T ] ((‚ü¶‚üßvar-helper v œÅ Œ±) M.[ M.lock-fmap ‚ü¶ œÅ ‚üßmod M.œÄ ]')
‚ü¶‚üßvar-helper {T = T} (skip-lock {Œ∫ = Œ∫} œÜ v) œÅ Œ± =
  M.Œπ‚Åª¬π[ ty-natural T ] ((‚ü¶‚üßvar-helper v (œÜ ‚ìú œÅ) (subst (TwoCell _) (mod-assoc Œ∫) Œ±)) M.[ M.to (M.eq-lock (‚ü¶‚ìú‚üß-sound œÜ œÅ) _) ]')

‚ü¶_,_‚üßvar-nmls : {Œº Œ∫ : Modality m n} ‚Üí (v : Var _ Œº T Œ∫ Œì) ‚Üí TwoCell Œº Œ∫ ‚Üí SemTm ‚ü¶ Œì ‚üßctx-nmls ‚ü¶ T ‚üßty
‚ü¶_,_‚üßvar-nmls {m = m} {T = T} v Œ± = ‚ü¶‚üßvar-helper v ùüô (subst (TwoCell _) (sym mod-unit ≥) Œ±)

‚ü¶_‚üßtm-nmls : Tm Œì T ‚Üí SemTm ‚ü¶ Œì ‚üßctx-nmls ‚ü¶ T ‚üßty
‚ü¶ var' _ {v} Œ± ‚üßtm-nmls = ‚ü¶ v , Œ± ‚üßvar-nmls
‚ü¶ mod‚ü® Œº ‚ü© t ‚üßtm-nmls = M.mod-intro ‚ü¶ Œº ‚üßmod ‚ü¶ t ‚üßtm-nmls
‚ü¶ mod-elim {T = T} {S = S} œÅ Œº _ t s ‚üßtm-nmls =
  M.Œπ‚Åª¬π[ ty-natural S ] (
    ‚ü¶ s ‚üßtm-nmls M.[ M.term-to-subst (M.Œπ[ M.eq-mod-closed (‚ü¶‚ìú‚üß-sound œÅ Œº) (ty-closed-natural T) ]
                                         M.mod-intro ‚ü¶ œÅ ‚üßmod ‚ü¶ t ‚üßtm-nmls)
                   ]')
‚ü¶ lam[_‚à£_‚àà_]_ {S = S} _ _ _ t ‚üßtm-nmls = M.lam _ (M.Œπ[ ty-natural S ] ‚ü¶ t ‚üßtm-nmls)
‚ü¶ _‚àô_ {Œº = Œº} f t ‚üßtm-nmls = M.app ‚ü¶ f ‚üßtm-nmls (M.mod-intro ‚ü¶ Œº ‚üßmod ‚ü¶ t ‚üßtm-nmls)
‚ü¶ zero ‚üßtm-nmls = M.zero'
‚ü¶ suc n ‚üßtm-nmls = M.app M.suc' ‚ü¶ n ‚üßtm-nmls
‚ü¶ nat-elim a f n ‚üßtm-nmls = M.app (M.nat-elim _ ‚ü¶ a ‚üßtm-nmls ‚ü¶ f ‚üßtm-nmls) ‚ü¶ n ‚üßtm-nmls
‚ü¶ true ‚üßtm-nmls = M.true'
‚ü¶ false ‚üßtm-nmls = M.false'
‚ü¶ if b t f ‚üßtm-nmls = M.if' ‚ü¶ b ‚üßtm-nmls then' ‚ü¶ t ‚üßtm-nmls else' ‚ü¶ f ‚üßtm-nmls
‚ü¶ pair t s ‚üßtm-nmls = M.app (M.app M.pair ‚ü¶ t ‚üßtm-nmls) ‚ü¶ s ‚üßtm-nmls
‚ü¶ fst p ‚üßtm-nmls = M.app M.fst ‚ü¶ p ‚üßtm-nmls
‚ü¶ snd p ‚üßtm-nmls = M.app M.snd ‚ü¶ p ‚üßtm-nmls

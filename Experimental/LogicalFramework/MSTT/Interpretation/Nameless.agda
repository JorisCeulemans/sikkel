--------------------------------------------------
-- Interpretation of nameless MSTT types, contexts and terms in a
--   presheaf model
--------------------------------------------------

module Experimental.LogicalFramework.MSTT.Interpretation.Nameless where

open import Relation.Binary.PropositionalEquality

open import Model.BaseCategory
open import Model.CwF-Structure as M
  renaming (Ctx to SemCtx; Ty to SemTy; Tm to SemTm) using ()
import Model.Type.Function as M
import Model.Type.Product as M
import Model.Type.Discrete as M
import Model.Modality as M

open import Experimental.ClosedTypes as M
open import Experimental.ClosedTypes.Modal as M

open import Experimental.LogicalFramework.MSTT.ModeTheory
open import Experimental.LogicalFramework.MSTT.Syntax.Nameless
open import Experimental.LogicalFramework.MSTT.AlphaEquivalence
open import Experimental.LogicalFramework.MSTT.Interpretation.ModeTheory

private variable
  m n o : Mode
  Œº Œ∫ : Modality m n
  Œì : Ctx m
  T : Ty m




‚ü¶_‚üßty : Ty m ‚Üí ClosedTy ‚ü¶ m ‚üßmode
‚ü¶ Nat' ‚üßty = M.Nat'
‚ü¶ Bool' ‚üßty = M.Bool'
‚ü¶ T ‚áõ S ‚üßty = ‚ü¶ T ‚üßty M.‚áõ ‚ü¶ S ‚üßty
‚ü¶ T ‚ä† S ‚üßty = ‚ü¶ T ‚üßty M.‚ä† ‚ü¶ S ‚üßty
‚ü¶ ‚ü® Œº ‚à£ T ‚ü© ‚üßty = M.s‚ü® ‚ü¶ Œº ‚üßmod ‚à£ ‚ü¶ T ‚üßty ‚ü©

‚ü¶_‚üßctx-nmls : Ctx m ‚Üí SemCtx ‚ü¶ m ‚üßmode
‚ü¶ ‚óá ‚üßctx-nmls = M.‚óá
‚ü¶ Œì ,, Œº ‚à£ _ ‚àà T ‚üßctx-nmls = ‚ü¶ Œì ‚üßctx-nmls ,,‚Çõ M.s‚ü® ‚ü¶ Œº ‚üßmod ‚à£ ‚ü¶ T ‚üßty ‚ü©
‚ü¶ Œì ,lock‚ü® Œº ‚ü© ‚üßctx-nmls = M.lock ‚ü¶ Œº ‚üßmod ‚ü¶ Œì ‚üßctx-nmls

‚ü¶‚üßvar-helper : {Œì : Ctx m} {Œº : Modality n o} {Œ∫ : Modality m o} (v : Var _ Œº T Œ∫ Œì) ‚Üí
               (œÅ : Modality n m) ‚Üí TwoCell Œº (Œ∫ ‚ìú œÅ) ‚Üí SimpleTm ‚ü¶ Œì ,lock‚ü® œÅ ‚ü© ‚üßctx-nmls ‚ü¶ T ‚üßty
‚ü¶‚üßvar-helper {Œº = Œº} vzero œÅ Œ± =
  (smod-elim ‚ü¶ Œº ‚üßmod sŒæ) M.[ M.transf-op (M.transf ‚ü¶ subst (TwoCell _) mod-unitÀ° Œ± ‚üßtwo-cell) _ ]s
‚ü¶‚üßvar-helper (vsuc v) œÅ Œ± = (‚ü¶‚üßvar-helper v œÅ Œ±) M.[ M.lock-fmap ‚ü¶ œÅ ‚üßmod M.œÄ ]s
‚ü¶‚üßvar-helper (skip-lock {Œ∫ = Œ∫} œÜ v) œÅ Œ± =
  (‚ü¶‚üßvar-helper v (œÜ ‚ìú œÅ) (subst (TwoCell _) (mod-assoc {Œº = Œ∫}) Œ±)) M.[ M.to (M.eq-lock (‚ü¶‚ìú‚üß-sound œÜ œÅ) _) ]s

‚ü¶_,_‚üßvar-nmls : {Œº Œ∫ : Modality m n} ‚Üí (v : Var _ Œº T Œ∫ Œì) ‚Üí TwoCell Œº Œ∫ ‚Üí SimpleTm ‚ü¶ Œì ‚üßctx-nmls ‚ü¶ T ‚üßty
‚ü¶_,_‚üßvar-nmls {m = m} v Œ± = (‚ü¶‚üßvar-helper v ùüô (subst (TwoCell _) (sym mod-unit ≥) Œ±)) M.[ M.to (M.eq-lock (‚ü¶ùüô‚üß-sound {m}) _) ]s

‚ü¶_‚üßtm-nmls : Tm Œì T ‚Üí SimpleTm ‚ü¶ Œì ‚üßctx-nmls ‚ü¶ T ‚üßty
‚ü¶ var' _ {v} Œ± ‚üßtm-nmls = ‚ü¶ v , Œ± ‚üßvar-nmls
‚ü¶ mod‚ü® Œº ‚ü© t ‚üßtm-nmls = smod-intro ‚ü¶ Œº ‚üßmod ‚ü¶ t ‚üßtm-nmls
‚ü¶ mod-elim œÅ Œº _ t s ‚üßtm-nmls =
  smtt-mod-elim ‚ü¶ œÅ ‚üßmod ‚ü¶ Œº ‚üßmod ‚ü¶ t ‚üßtm-nmls (‚ü¶ s ‚üßtm-nmls [ M.to (M.,,‚Çõ-cong (seq-mod _ (‚ü¶‚ìú‚üß-sound œÅ Œº))) ]s)
‚ü¶ lam[_‚àà_]_ _ _ t ‚üßtm-nmls =
  -- The following let binding is only necessary because Agda cannot
  -- infer the mode in ‚ü¶ùüô‚üßsound, and we cannot introduce the mode in
  -- the LHS because it is a parameter and not an index in the
  -- definition of the syntax.
  let m = _
      ‚ü¶t‚üß = ‚ü¶_‚üßtm-nmls {m} t
  in
  sŒª[ _ ] (‚ü¶t‚üß M.[ M.to (M.,,‚Çõ-cong (M.‚âÖ·µó ∏-trans (seq-mod _ (‚ü¶ùüô‚üß-sound {m})) M.s‚ü®ùüô‚à£-‚ü©)) ]s)
‚ü¶ f ‚àô t ‚üßtm-nmls = ‚ü¶ f ‚üßtm-nmls ‚àô‚Çõ ‚ü¶ t ‚üßtm-nmls
‚ü¶ zero ‚üßtm-nmls = szero
‚ü¶ suc ‚üßtm-nmls = ssuc
‚ü¶ nat-elim a f ‚üßtm-nmls = snat-elim ‚ü¶ a ‚üßtm-nmls ‚ü¶ f ‚üßtm-nmls
‚ü¶ true ‚üßtm-nmls = strue
‚ü¶ false ‚üßtm-nmls = sfalse
‚ü¶ if b t f ‚üßtm-nmls = sif ‚ü¶ b ‚üßtm-nmls ‚ü¶ t ‚üßtm-nmls ‚ü¶ f ‚üßtm-nmls
‚ü¶ pair t s ‚üßtm-nmls = spair ‚ü¶ t ‚üßtm-nmls ‚ü¶ s ‚üßtm-nmls
‚ü¶ fst p ‚üßtm-nmls = sfst ‚ü¶ p ‚üßtm-nmls
‚ü¶ snd p ‚üßtm-nmls = ssnd ‚ü¶ p ‚üßtm-nmls

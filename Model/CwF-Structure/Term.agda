--------------------------------------------------
-- Terms
--------------------------------------------------

open import Model.BaseCategory

module Model.CwF-Structure.Term {C : BaseCategory}  where

open import Relation.Binary.PropositionalEquality hiding ([_]; naturality)

open import Model.Helpers
open import Model.CwF-Structure.Context
open import Model.CwF-Structure.ContextEquivalence
open import Model.CwF-Structure.Type

open BaseCategory C

infix 1 _โแตแต_

private
  variable
    x : Ob
    ฮ ฮ ฮ : Ctx C
    T S S' R : Ty ฮ


--------------------------------------------------
-- Definition of terms

record Tm (ฮ : Ctx C) (T : Ty ฮ) : Set where
  constructor MkTm
  no-eta-equality

  field
    term : (x : Ob) (ฮณ : ฮ โจ x โฉ) โ T โจ x , ฮณ โฉ
    naturality : โ {x y} {ฮณy : ฮ โจ y โฉ} {ฮณx : ฮ โจ x โฉ} (f : Hom x y) (eฮณ : ฮ โช f โซ ฮณy โก ฮณx) โ
                 T โช f , eฮณ โซ (term y ฮณy) โก term x ฮณx
open Tm public renaming (term to infix 15 _โจ_,_โฉ')

private
  variable
    t t' : Tm ฮ T
    s s' : Tm ฮ S


--------------------------------------------------
-- Equivalence of terms

record _โแตแต_ {ฮ : Ctx C} {T : Ty ฮ} (t s : Tm ฮ T) : Set where
  field
    eq : โ {x} ฮณ โ t โจ x , ฮณ โฉ' โก s โจ x , ฮณ โฉ'
open _โแตแต_ public

reflแตแต : t โแตแต t
eq reflแตแต _ = refl

symแตแต : t โแตแต t' โ t' โแตแต t
eq (symแตแต t=t') ฮณ = sym (eq t=t' ฮณ)

transแตแต : {t1 t2 t3 : Tm ฮ T} โ t1 โแตแต t2 โ t2 โแตแต t3 โ t1 โแตแต t3
eq (transแตแต t1=t2 t2=t3) ฮณ = trans (eq t1=t2 ฮณ) (eq t2=t3 ฮณ)

module โแตแต-Reasoning where
  infix  3 _โ
  infixr 2 _โโจโฉ_ step-โ step-โห
  infix  1 begin_

  begin_ : โ {t s : Tm ฮ T} โ t โแตแต s โ t โแตแต s
  begin_ t=s = t=s

  _โโจโฉ_ : โ (t {s} : Tm ฮ T) โ t โแตแต s โ t โแตแต s
  _ โโจโฉ t=s = t=s

  step-โ : โ (t1 {t2 t3} : Tm ฮ T) โ t2 โแตแต t3 โ t1 โแตแต t2 โ t1 โแตแต t3
  step-โ _ t2=t3 t1=t2 = transแตแต t1=t2 t2=t3

  step-โห : โ (t1 {t2 t3} : Tm ฮ T) โ t2 โแตแต t3 โ t2 โแตแต t1 โ t1 โแตแต t3
  step-โห _ t2=t3 t2=t1 = transแตแต (symแตแต t2=t1) t2=t3

  _โ : โ (t : Tm ฮ T) โ t โแตแต t
  _โ _ = reflแตแต

  syntax step-โ  t1 t2โt3 t1โt2 = t1 โโจ  t1โt2 โฉ t2โt3
  syntax step-โห t1 t2โt3 t2โt1 = t1 โหโจ t2โt1 โฉ t2โt3


--------------------------------------------------
-- Reindexing maps (cf. Dybjer's internal type theory)

-- The reindexing map ฮน can be implemented in terms of a similar
-- operation for the more primitive transformation T โฃ S. However, the
-- following version enables Agda to infer the type equality proofs
-- when using the properties of ฮน below.
ฮน[_]_ : T โแตสธ S โ Tm ฮ S โ Tm ฮ T
(ฮน[ T=S ] s) โจ x , ฮณ โฉ' = func (to T=S) (s โจ x , ฮณ โฉ')
naturality (ฮน[_]_ {T = T} {S = S} T=S s) f eฮณ =
  begin
    T โช f , eฮณ โซ func (to T=S) (s โจ _ , _ โฉ')
  โกโจ naturality (to T=S) โฉ
    func (to T=S) (S โช f , eฮณ โซ (s โจ _ , _ โฉ'))
  โกโจ cong (func (to T=S)) (naturality s f eฮณ) โฉ
    func (to T=S) (s โจ _ , _ โฉ') โ
  where open โก-Reasoning

ฮน-cong : {T=S : T โแตสธ S} โ
         s โแตแต s' โ ฮน[ T=S ] s โแตแต ฮน[ T=S ] s'
eq (ฮน-cong {T=S = T=S} s=s') ฮณ = cong (func (to T=S)) (eq s=s' ฮณ)

ฮน-congแต : {e e' : T โแตสธ S} {t : Tm ฮ S} โ e โแต e' โ ฮน[ e ] t โแตแต ฮน[ e' ] t
eq (ฮน-congแต ๐) ฮณ = eq (to-eq ๐) _

ฮน-refl : {t : Tm ฮ T} โ ฮน[ reflแตสธ ] t โแตแต t
eq ฮน-refl _ = refl

ฮน-symหก : {T=S : T โแตสธ S} {s : Tm ฮ S} โ
         ฮน[ symแตสธ T=S ] (ฮน[ T=S ] s) โแตแต s
eq (ฮน-symหก {T=S = T=S} {s}) ฮณ = eq (isoสณ T=S) (s โจ _ , ฮณ โฉ')

ฮน-symสณ : {T=S : T โแตสธ S} {t : Tm ฮ T} โ
         ฮน[ T=S ] (ฮน[ symแตสธ T=S ] t) โแตแต t
eq (ฮน-symสณ {T=S = T=S} {t}) ฮณ = eq (isoหก T=S) (t โจ _ , ฮณ โฉ')

ฮน-trans : {T=S : T โแตสธ S} {S=R : S โแตสธ R} {r : Tm ฮ R} โ
          ฮน[ transแตสธ T=S S=R ] r โแตแต ฮน[ T=S ] (ฮน[ S=R ] r)
eq ฮน-trans ฮณ = refl

ฮนโปยน[_]_ : T โแตสธ S โ Tm ฮ T โ Tm ฮ S
ฮนโปยน[ T=S ] t = ฮน[ symแตสธ T=S ] t

ฮนโปยน-cong : {T=S : T โแตสธ S} โ
           t โแตแต t' โ ฮนโปยน[ T=S ] t โแตแต ฮนโปยน[ T=S ] t'
ฮนโปยน-cong = ฮน-cong

ฮนโปยน-congแต : {e e' : T โแตสธ S} {t : Tm ฮ T} โ e โแต e' โ ฮนโปยน[ e ] t โแตแต ฮนโปยน[ e' ] t
eq (ฮนโปยน-congแต ๐) ฮณ = eq (from-eq ๐) _

ฮนโปยน-trans : {T=S : T โแตสธ S} {S=R : S โแตสธ R} {t : Tm ฮ T} โ
            ฮนโปยน[ transแตสธ T=S S=R ] t โแตแต ฮนโปยน[ S=R ] (ฮนโปยน[ T=S ] t)
eq ฮนโปยน-trans _ = refl

move-ฮน-right : {T=S : T โแตสธ S} {t : Tm ฮ T} {s : Tm ฮ S} โ
               ฮนโปยน[ T=S ] t โแตแต s โ t โแตแต ฮน[ T=S ] s
move-ฮน-right t=s = transแตแต (symแตแต ฮน-symสณ) (ฮน-cong t=s)

move-ฮน-left : {S=T : S โแตสธ T} {t : Tm ฮ T} {s : Tm ฮ S} โ
              t โแตแต ฮนโปยน[ S=T ] s โ ฮน[ S=T ] t โแตแต s
move-ฮน-left t=s = transแตแต (ฮน-cong t=s) ฮน-symสณ

move-ฮนโปยน-right : {S=T : S โแตสธ T} {t : Tm ฮ T} {s : Tm ฮ S} โ
                 ฮน[ S=T ] t โแตแต s โ t โแตแต ฮนโปยน[ S=T ] s
move-ฮนโปยน-right t=s = transแตแต (symแตแต ฮน-symหก) (ฮนโปยน-cong t=s)

move-ฮนโปยน-left : {T=S : T โแตสธ S} {t : Tm ฮ T} {s : Tm ฮ S} โ
                t โแตแต ฮน[ T=S ] s โ ฮนโปยน[ T=S ] t โแตแต s
move-ฮนโปยน-left t=s = transแตแต (ฮนโปยน-cong t=s) ฮน-symหก

ฮน-congแต-2-1 : {R=S : R โแตสธ S} {S=T : S โแตสธ T} {R=T : R โแตสธ T} {t : Tm ฮ T} โ
              transแตสธ R=S S=T โแต R=T โ
              ฮน[ R=S ] (ฮน[ S=T ] t) โแตแต ฮน[ R=T ] t
ฮน-congแต-2-1 ๐ = transแตแต (symแตแต ฮน-trans) (ฮน-congแต ๐)

ฮนโปยน-congแต-2-1 : {R=S : R โแตสธ S} {S=T : S โแตสธ T} {R=T : R โแตสธ T} {r : Tm ฮ R} โ
                transแตสธ R=S S=T โแต R=T โ
                ฮนโปยน[ S=T ] (ฮนโปยน[ R=S ] r) โแตแต ฮนโปยน[ R=T ] r
ฮนโปยน-congแต-2-1 ๐ = transแตแต (symแตแต ฮนโปยน-trans) (ฮนโปยน-congแต ๐)

ฮน-congแต-2-2 : {R=S : R โแตสธ S} {S=T : S โแตสธ T} {R=S' : R โแตสธ S'} {S'=T : S' โแตสธ T} {t : Tm ฮ T} โ
              transแตสธ R=S S=T โแต transแตสธ R=S' S'=T โ
              ฮน[ R=S ] (ฮน[ S=T ] t) โแตแต ฮน[ R=S' ] (ฮน[ S'=T ] t)
ฮน-congแต-2-2 ๐ = transแตแต (symแตแต ฮน-trans) (transแตแต (ฮน-congแต ๐) ฮน-trans)

ฮนโปยน-congแต-2-2 : {R=S : R โแตสธ S} {S=T : S โแตสธ T} {R=S' : R โแตสธ S'} {S'=T : S' โแตสธ T} {r : Tm ฮ R} โ
                transแตสธ R=S S=T โแต transแตสธ R=S' S'=T โ
                ฮนโปยน[ S=T ] (ฮนโปยน[ R=S ] r) โแตแต ฮนโปยน[ S'=T ] (ฮนโปยน[ R=S' ] r)
ฮนโปยน-congแต-2-2 ๐ = transแตแต (symแตแต ฮนโปยน-trans) (transแตแต (ฮนโปยน-congแต ๐) ฮนโปยน-trans)


--------------------------------------------------
-- Substitution of terms

_[_]' : Tm ฮ T โ (ฯ : ฮ โ ฮ) โ Tm ฮ (T [ ฯ ])
t [ ฯ ]' โจ x , ฮด โฉ' = t โจ x , func ฯ ฮด โฉ'
naturality (t [ ฯ ]') f eฮณ = naturality t f _

tm-subst-cong-tm : (ฯ : ฮ โ ฮ) โ t โแตแต s โ t [ ฯ ]' โแตแต s [ ฯ ]'
eq (tm-subst-cong-tm ฯ t=s) ฮด = eq t=s (func ฯ ฮด)

ฮน-subst-commute : {ฯ : ฮ โ ฮ} {T=S : T โแตสธ S} {s : Tm ฮ S} โ
                  ฮน[ ty-subst-cong-ty ฯ T=S ] (s [ ฯ ]') โแตแต (ฮน[ T=S ] s) [ ฯ ]'
eq ฮน-subst-commute _ = refl

ฮนโปยน-subst-commute : {ฯ : ฮ โ ฮ} {T=S : T โแตสธ S} {t : Tm ฮ T} โ
                    ฮนโปยน[ ty-subst-cong-ty ฯ T=S ] (t [ ฯ ]') โแตแต (ฮนโปยน[ T=S ] t) [ ฯ ]'
eq ฮนโปยน-subst-commute _ = refl

tm-subst-cong-subst : {ฯ ฯ : ฮ โ ฮ} (t : Tm ฮ T) โ
                      (ฯ=ฯ : ฯ โหข ฯ) โ t [ ฯ ]' โแตแต ฮน[ ty-subst-cong-subst ฯ=ฯ T ] (t [ ฯ ]')
eq (tm-subst-cong-subst t ฯ=ฯ) ฮด = sym (naturality t hom-id _)

tm-subst-id : (t : Tm ฮ T) โ t [ id-subst ฮ ]' โแตแต ฮน[ ty-subst-id T ] t
eq (tm-subst-id t) _ = refl

tm-subst-comp : (t : Tm ฮ T) (ฯ : ฮ โ ฮ) (ฯ : ฮ โ ฮ) โ
                t [ ฯ ]' [ ฯ ]' โแตแต ฮน[ ty-subst-comp T ฯ ฯ ] (t [ ฯ โ ฯ ]')
eq (tm-subst-comp t ฯ ฯ) _ = refl

-- Nicer syntax for substitutions coming from context equality
ฮนc[_]'_ : {S : Ty ฮ} โ (ฮ=ฮ : ฮ โแถ ฮ) โ Tm ฮ S โ Tm ฮ (ฮนc[ ฮ=ฮ ] S)
ฮนc[ ฮ=ฮ ]' s = s [ from ฮ=ฮ ]'

ฮนcโปยน[_]'_ : {T : Ty ฮ} โ (ฮ=ฮ : ฮ โแถ ฮ) โ Tm ฮ T โ Tm ฮ (ฮนcโปยน[ ฮ=ฮ ] T)
ฮนcโปยน[ ฮ=ฮ ]' t = t [ to ฮ=ฮ ]'
